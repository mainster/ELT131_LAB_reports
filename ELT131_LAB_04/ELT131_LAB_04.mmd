Title:      Report ELT131 LAB 04
Author:     Del Basso, Manuel
Date:       02-04-2017
Location:   WHZ
Footicon:   ./pics/whz.png
 
ELT131 - Lab 04 report 
============================== 
[TOC]

## Introduction ##
>

__Used components:__

 - Hardware
     - TI TMS320F28335 Explorer Kit for TI C2000™ F28x family of microprocessors, controller card Delfino
     - Oscilloscope: PC-USB Scope _PCSU1000, velleman_
 - Software
     - Code Composer Studio Version: 7.1.0.00015 (CCS7)
     - Board support via ti's [__controlSUITE__](http://www.ti.com/tool/controlsuite?DCMP=mcu_controlsuite&HQS=controlsuite) v3.4.5
     - SYS/BIOS 
         + Version: 6.33.4.39
     - TI-RTOS for C2000
         + Version: 2.16.1.14
 - Development Plattform
     + ```lsb_release -d``` <span style="margin-left: 1em;">Linux Mint 18 Sarah (LinuxMint)</span>
     + ```uname -rpo``` <span style="margin-left: 1em;">4.4.0-57-generic x86_64 GNU/Linux</span>




## Explore the RTOS Object Viewer (ROV) (Part 1) ##
>Answer the questions from procedure step 2.

<h4 class="sp"><span>ROV-Hwi (Module/Basic tabs)</span></h4>
__Q:__ What is the current size of the stack?
__Q:__ What was the peak used? 
__Q:__ How many Hwi’s are configured in your system? 
__Q:__ What is the name of your own HWI?
__Q:__ Which interrupt number is associated with it?

<h4 class="sp"><span>ROV-Swi (Basic tab)</span></h4>
__Q:__ How many Swi’s are configured in your system? 
__Q:__ What is the Swi’s function name? 
__Q:__ What is the priority of your Swi? 

## Logging setup (Part 2) ##
>Copy the final version of the cfg-script "app.cfg" to your report. To reduce the size of the file, remove all comment lines and copy the rest into you report file for inspection

## UIA Results (Part 3) ##
>Add the oscilloscope screenshots for the interrupt latency and jitter (see page 4-5) to your report.

>Add a screenshot of the execution graph and the CPU – load (see page 4-6) to your report.

>Answer the questions in procedure step 3.4. at page 4-6.

## SWI duration (Part 4) ##
>Answer the question in procedure step 4 (page 4-7).

>Fill in the table page 4-7 and add it to your report.


<!-- <details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_3.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_3/ELT131_LAB_03_RTOS_3.c"
</details>
 -->

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_3.c</span></h4></summary>
@codeimport: "./ELT131_LAB_04_01/ELT131_04_01.c"
</details>


<!-- 

<h4 class="sphd"><span>Non-OS setup</span></h4>
# Interrupt latency and jitter (Non-OS) #
## Non-OS setup running from RAM (Part 1) ##

>Add the final code of files "ePWM1.c" and "ELT131_03_part1.c" to your report.

### Non-OS setup sources ###
<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">md_epwm.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_NON-OS/MD_F2833x_LIB/md_epwm.c"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">main_03_p1.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_NON-OS/main_03_p1.c"
</details>

<div style="height: 1em;"></div>

### Measure Interrupt Latency and jitter 
>Add the oscilloscope screenshots for signal ePWM1 to your report. Test the signal at frequencies: 200 kHz, 20 kHz, 2 kHz, 200 Hz and 20 Hz.

<boxed>fehlt noch</boxed>

>Add the oscilloscope screenshots for the interrupt latency to your report.

<a href="./pics/non-os_ram_jitter_at_30.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_ram_jitter_at_30.png" title="Interrupt jitter @30Hz of __non-OS__ setup running from __RAM__" class="noborder oszi"><figcaption>Interrupt jitter of __non-OS__ setup running from __RAM__ @$\;\si{30Hz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_ram_jitter_at_200.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_ram_jitter_at_200.png" title="Interrupt jitter @200Hz of __non-OS__ setup running from __RAM__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __RAM__ @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_ram_jitter_at_2e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_ram_jitter_at_2e3.png" title="Interrupt jitter @2kHz of __non-OS__ setup running from __RAM__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __RAM__ @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_ram_jitter_at_20e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_ram_jitter_at_20e3.png" title="Interrupt jitter @20kHz of __non-OS__ setup running from __RAM__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __RAM__ @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_ram_jitter_at_200e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_ram_jitter_at_200e3.png" title="Interrupt jitter @200kHz of __non-OS__ setup running from __RAM__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __RAM__ @$\;\si{200kHz}\;$</figcaption> </figure></a>

<div style="height: 1em;"></div>

### Measurement results documentation  ###
>Fill in Table 1.9. and add it to the report.

Latency and jitter table running non-OS setup from RAM

<center>

| ePWM1A Freq     | Interrupt latency | Interrupt jitter |
|:---------------:|:-----------------:|:----------------:|
| $\si\{30Hz\}$   | $\si\{500 ns\}$   | $\si\{54 ns\}$   |
| $\si\{200Hz\}$  | $\si\{500 ns\}$   | $\si\{52 ns\}$   |
| $\si\{2kHz\}$   | $\si\{500 ns\}$   | $\si\{51 ns\}$   |
| $\si\{20kHz\}$  | $\si\{494 ns\}$   | $\si\{49 ns\}$   |
| $\si\{200kHz\}$ | $\si\{490 ns\}$   | $\si\{61 ns\}$   |

</center>

<h4 class="sphd"><span>Non-OS setup</span></h4>
## Non-OS setup running from FLASH (Part 2) ##

>Add the final code of file "ELT131_03_part2.c" to your report.

Please refer to source code of [Part 1](#non-os-setup-sources).

### Measure Interrupt Latency and jitter ###
>Add the oscilloscope screenshots for the interrupt latency and jitter to your report.


<a href="./pics/non-os_flash_jitter_at_30.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_flash_jitter_at_30.png" title="Interrupt jitter @30Hz of __non-OS__ setup running from __FLASH__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __FLASH__ @$\;\si{30Hz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_flash_jitter_at_200.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_flash_jitter_at_200.png" title="Interrupt jitter @200Hz of __non-OS__ setup running from __FLASH__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __FLASH__ @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_flash_jitter_at_2e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_flash_jitter_at_2e3.png" title="Interrupt jitter @2kHz of __non-OS__ setup running from __FLASH__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __FLASH__ @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_flash_jitter_at_20e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_flash_jitter_at_20e3.png" title="Interrupt jitter @20kHz of __non-OS__ setup running from __FLASH__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __FLASH__ @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/non-os_flash_jitter_at_200e3.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_flash_jitter_at_200e3.png" title="Interrupt jitter @200kHz of __non-OS__ setup running from __FLASH__" class="noborder"><figcaption>Interrupt jitter of __non-OS__ setup running from __FLASH__ @$\;\si{200kHz}\;$</figcaption> </figure></a>

<div style="height: 1em;"></div>

### Measurement results documentation  ###
>Fill in Table 2.4. and add it to the report.

Latency and jitter table running __non-OS__ setup from __FLASH__.

<center>

| ePWM1A Freq     | Interrupt latency | Interrupt jitter |
|:---------------:|:-----------------:|:----------------:|
| $\si\{30Hz\}$   | $\si\{890 ns\}$   | $\si\{110 ns\}$  |
| $\si\{200Hz\}$  | $\si\{870 ns\}$   | $\si\{76 ns\}$   |
| $\si\{2kHz\}$   | $\si\{870 ns\}$   | $\si\{76 ns\}$   |
| $\si\{20kHz\}$  | $\si\{870 ns\}$   | $\si\{76 ns\}$   |
| $\si\{200kHz\}$ | $\si\{870 ns\}$   | $\si\{76 ns\}$   |

</center>

# Interrupt latency and jitter (RTOS) #
All TI-RTOS projects are run from FLASH.

## TI-RTOS HWI setup (Part 3) ##
>Add the final code of file "ELT131_03_03.c" to your report.

Some basic UART/SCI and encoder read-in functions has been added to the project. The ePWM1 frequencies are selectable via on-board hex encoder switch.

The interrupt latency and jitter measurements have been performed several times in order to assess any deviations introduced by the additional idle task (query encoder GPIOs). According to the interrupt __latency__, the next oscilloscope screenshots shows that there are no relevant changes. After taking a look at the resulting interrupt jitter, a measureable influence can be pointed out.

<a href="./pics/os_irq_latency_idle_is_enc.png" target="_blank"><figure class="oszi"> <img src="./pics/os_irq_latency_idle_is_enc.png" title="Interrupt latency @200kHz of __RTOS__ setup including an __idle task__ to query encoder GPIOs" class="noborder"><figcaption>Interrupt latency of __RTOS__ setup including an __idle task__ to query encoder GPIOs @$\;\si{200kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_irq_latency_idle_is_NONE.png" target="_blank"><figure class="oszi"> <img src="./pics/os_irq_latency_idle_is_NONE.png" title="Interrupt latency @200kHz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt latency of __RTOS__ setup __without__ any idle task @$\;\si{200kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_irq_jitter_idle_is_enc.png" target="_blank"><figure class="oszi"> <img src="./pics/os_irq_jitter_idle_is_enc.png" title="Interrupt jitter @200kHz of __RTOS__ setup including an __idle task__ to query encoder GPIOs" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ to query encoder GPIOs @$\;\si{200kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_irq_jitter_idle_is_NONE.png" target="_blank"><figure class="oszi"> <img src="./pics/os_irq_jitter_idle_is_NONE.png" title="Interrupt jitter @200kHz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{200kHz}\;$</figcaption> </figure></a>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_3.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_3/ELT131_LAB_03_RTOS_3.c"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_3.h</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_3/ELT131_LAB_03_RTOS_3.h"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">md_uart_sci.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_3/MD_F2833x_LIB/md_uart_sci.c"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">md_uart_sci.h</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_3/MD_F2833x_LIB/md_uart_sci.h"
</details>
<div style="height: 1em;"></div>

>Copy the final version of the cfg-script "app.cfg" to your report. To reduce the size of the file, remove all comment lines and copy the rest into you report file for inspection.

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">app.cfg</span></h4></summary>
```java
@codeimport: "./ELT131_LAB_03_RTOS_3/app.cfg"
@codeimport_nocomments
```
</details>
<div style="height: 1em;"></div>

>Add the oscilloscope screenshots for the interrupt latency and jitter to your report.

<a href="./pics/os_jitter_100Hz_idle_is_NONE_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_100Hz_idle_is_NONE_100ns.png" title="Interrupt jitter @100Hz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{100Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_200Hz_idle_is_NONE_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_200Hz_idle_is_NONE_100ns.png" title="Interrupt jitter @200Hz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_2kHz_idle_is_NONE_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_2kHz_idle_is_NONE_100ns.png" title="Interrupt jitter @2kHz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_20kHz_idle_is_NONE_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_20kHz_idle_is_NONE_100ns.png" title="Interrupt jitter @20kHz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_200kHz_idle_is_NONE_200ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_200kHz_idle_is_NONE_200ns.png" title="Interrupt jitter @200kHz of __RTOS__ setup __without__ any idle task" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup __without__ any idle task @$\;\si{200kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_100Hz_idle_is_enc_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_100Hz_idle_is_enc_100ns.png" title="Interrupt jitter @100Hz of __RTOS__ setup including an __idle task__" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ @$\;\si{100Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_200Hz_idle_is_enc_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_200Hz_idle_is_enc_100ns.png" title="Interrupt jitter @200Hz of __RTOS__ setup including an __idle task__" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_2kHz_idle_is_enc_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_2kHz_idle_is_enc_100ns.png" title="Interrupt jitter @2kHz of __RTOS__ setup including an __idle task__" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_20kHz_idle_is_enc_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_20kHz_idle_is_enc_100ns.png" title="Interrupt jitter @20kHz of __RTOS__ setup including an __idle task__" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_200kHz_idle_is_enc_200ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_200kHz_idle_is_enc_200ns.png" title="Interrupt jitter @200kHz of __RTOS__ setup including an __idle task__" class="noborder"><figcaption>Interrupt jitter of __RTOS__ setup including an __idle task__ @$\;\si{200kHz}\;$</figcaption> </figure></a>

>Fill in Table 3.8. and add it to the report.

Latency and jitter table running __RTOS__ setup from FLASH __without__ any idle task.

<center>

| ePWM1A Freq     | Interrupt latency | Interrupt jitter |
|:---------------:|:-----------------:|:----------------:|
| $\si\{100Hz\}$  | $\si\{1.65 µs\}$  | $\si\{90 ns\}$   |
| $\si\{200Hz\}$  | $\si\{1.65 µs\}$  | $\si\{130 ns\}$  |
| $\si\{2kHz\}$   | $\si\{1.65 µs\}$  | $\si\{130 ns\}$  |
| $\si\{20kHz\}$  | $\si\{1.65 µs\}$  | $\si\{110 ns\}$  |
| $\si\{200kHz\}$ | $\si\{1.65 µs\}$  | $\si\{170 ns\}$  |

</center>

## TI-RTOS SWI setup (Part 4) ##
>Add the final code of file "ELT131_03_04.c" to your report.

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_4.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_4/ELT131_LAB_03_RTOS_4.c"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_4.h</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_4/ELT131_LAB_03_RTOS_4.h"
</details>

>Copy the final version of the cfg-script "app.cfg" to your report. To reduce the size of the file, remove all comment lines and copy the rest into you report file for inspection.

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">app.cfg</span></h4></summary>
```java
@codeimport: "./ELT131_LAB_03_RTOS_4/app.cfg"
@codeimport_nocomments
```
</details>

>Add the oscilloscope screenshots for the interrupt latency and jitter to your report.

<a href="./pics/os_jitter_swi_100Hz_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_swi_100Hz_100ns.png" title="SWI Interrupt jitter @100Hz of __RTOS__ setup" class="noborder"><figcaption>SWI Interrupt jitter of __RTOS__ setup @$\;\si{100Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_swi_200Hz_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_swi_200Hz_100ns.png" title="SWI Interrupt jitter @200Hz of __RTOS__ setup" class="noborder"><figcaption>SWI Interrupt jitter of __RTOS__ setup @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_swi_2kHz_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_swi_2kHz_100ns.png" title="SWI Interrupt jitter @2kHz of __RTOS__ setup" class="noborder"><figcaption>SWI Interrupt jitter of __RTOS__ setup @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_jitter_swi_20kHz_100ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_jitter_swi_20kHz_100ns.png" title="SWI Interrupt jitter @20kHz of __RTOS__ setup" class="noborder"><figcaption>SWI Interrupt jitter of __RTOS__ setup @$\;\si{20kHz}\;$</figcaption> </figure></a>

According to the next oscilloscope picture we are not able to service IRQs fast enough when the ePWM1 module operates at $f_{ePWM}\;=\;\si{200kHz}$ and TI-RTOS is configured for SWI.  

<a href="./pics/os_swi_no_200kHz_100ns_v2_because.png" target="_blank"><figure class="oszi"> <img src="./pics/os_swi_no_200kHz_100ns_v2_because.png" title="Overall SWI IRQ service time @20kHz, __RTOS__ setup" class="noborder"><figcaption>Overall SWI IRQ service time of __RTOS__ setup @$\;\si{20kHz}\;$</figcaption> </figure></a>

>Fill in Table 4.5. and add it to the report.

Latency and jitter table running __RTOS SWI__  setup from FLASH.

<center>

| ePWM1A Freq     | Interrupt latency | Interrupt jitter |
|:---------------:|:-----------------:|:----------------:|
| $\si\{100Hz\}$  | $\si\{3.92 µs\}$  | $\si\{40 ns\}$   |
| $\si\{200Hz\}$  | $\si\{3.92 µs\}$  | $\si\{100 ns\}$  |
| $\si\{2kHz\}$   | $\si\{3.92 µs\}$  | $\si\{130 ns\}$  |
| $\si\{20kHz\}$  | $\si\{3.92 µs\}$  | $\si\{90 ns\}$   |
| $\si\{200kHz\}$ | $NA$              | $NA$             |

</center>

## TI-RTOS zero latency interrupt (Part 5) ##
>Add the final code of file "ELT131_03_05.c" to your report.

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_5.c</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_5/ELT131_LAB_03_RTOS_5.c"
</details>

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">ELT131_LAB_03_RTOS_5.h</span></h4></summary>
@codeimport: "./ELT131_LAB_03_RTOS_5/ELT131_LAB_03_RTOS_5.h"
</details>

>Copy the final version of the cfg-script "app.cfg" to your report. To reduce the size of the file, remove all comment lines and copy the rest into you report file for inspection.

<details markdown=1>
<summary><h4 class="sphd foldable"><span class="codehd">app.cfg</span></h4></summary>
```java
@codeimport: "./ELT131_LAB_03_RTOS_5/app.cfg"
```
</details>

>Add the oscilloscope screenshots for the interrupt latency and jitter to your report.

<a href="./pics/os_zli_jitter_100Hz_50ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_zli_jitter_100Hz_50ns.png" title="Zero latency interrupt jitter @100Hz of __RTOS__ setup" class="noborder"><figcaption>Zero latency interrupt jitter of __RTOS__ setup @$\;\si{100Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_zli_jitter_200Hz_50ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_zli_jitter_200Hz_50ns.png" title="__Zero latency__ interrupt jitter @200Hz of __RTOS__ setup" class="noborder"><figcaption>__Zero latency__ interrupt jitter of __RTOS__ setup @$\;\si{200Hz}\;$</figcaption> </figure></a>

<a href="./pics/os_zli_jitter_2kHz_50ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_zli_jitter_2kHz_50ns.png" title="__Zero latency__ interrupt jitter @2kHz of __RTOS__ setup" class="noborder"><figcaption>__Zero latency__ interrupt jitter of __RTOS__ setup @$\;\si{2kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_zli_jitter_20kHz_50ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_zli_jitter_20kHz_50ns.png" title="__Zero latency__ interrupt jitter @20kHz of __RTOS__ setup" class="noborder"><figcaption>__Zero latency__ interrupt jitter of __RTOS__ setup @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_zli_jitter_200kHz_50ns.png" target="_blank"><figure class="oszi"> <img src="./pics/os_zli_jitter_200kHz_50ns.png" title="__Zero latency__ interrupt jitter @200kHz of __RTOS__ setup" class="noborder"><figcaption>__Zero latency__ interrupt jitter of __RTOS__ setup @$\;\si{200kHz}\;$</figcaption> </figure></a>

>Fill in Table 5.5. and add it to the report.

Latency and jitter table running RTOS __zero latency__ interrupt setup from FLASH.

<center>

| ePWM1A Freq     | Interrupt latency | Interrupt jitter |
|:---------------:|:-----------------:|:----------------:|
| $\si\{100Hz\}$  | $\si\{350 ns\}$   | $\si\{51 ns\}$   |
| $\si\{200Hz\}$  | $\si\{350 ns\}$   | $\si\{85 ns\}$   |
| $\si\{2kHz\}$   | $\si\{350 ns\}$   | $\si\{65 ns\}$   |
| $\si\{20kHz\}$  | $\si\{350 ns\}$   | $\si\{44 ns\}$   |
| $\si\{200kHz\}$ | $\si\{350 ns\}$   | $\si\{87 ns\}$   |

</center>

### Comparing non-os setup (RAM) vs. TI-RTOS Zero-latency (FLASH) ###
Zero latency operation may be used to ensure minimal interrupt-to-IRQ-handler delays, i. e. _minimum-latency-interrupt_. Compared to interrupt latencys in [part 3 (HWI)](#ti-rtos-hwi-setup-part-3) and [part 4 (SWI)](#ti-rtos-swi-setup-part-4), _zero latency_ configuration results in _most smallest latency_ of the TI-RTOS setups.
Contrary to expectations, 
From ti SYSBIOS documentation, chapter [C28x Hardware Interrupt Manager](http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/bios/sysbios/6_33_00_19/exports/bios_6_33_00_19/docs/cdoc/ti/sysbios/family/c28/Hwi.html#zero.Latency.I.E.R.Mask) 


<a href="./pics/non-os_latency_20kHz_20ns.png" target="_blank"><figure class="oszi"> <img src="./pics/non-os_latency_20kHz_20ns.png" title="Interrupt latency @20kHz of __non-OS__ setup running from __RAM__ (SYSCLKOUT=$\si{150MHz}$)" class="noborder"><figcaption>Interrupt latency of __non-OS__ setup running from __RAM__ ($\,F_{CPU}\,=\,\si{150MHz}\,$) @$\;\si{20kHz}\;$</figcaption> </figure></a>

<a href="./pics/os_latency_zli_20kHz_50ns.png " target="_blank"><figure class="oszi"> <img src="./pics/os_latency_zli_20kHz_50ns.png" title="Interrupt latency @20kHz of __RTOS__ setup running from __FLASH__ (SYSCLKOUT=$\si{150MHz}$)" class="noborder"><figcaption>Interrupt latency of __RTOS__ setup running from __FLASH__ ($\,F_{CPU}\,=\,\si{150MHz}\,$) @$\;\si{20kHz}\;$</figcaption> </figure></a>

 -->